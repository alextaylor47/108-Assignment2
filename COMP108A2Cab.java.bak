//
// Note: You are allowed to add additional methods if you need.
// Coded by Prudence Wong 2021-03-06
//
// Name: Alexander Taylor
// Student ID: 201539398
// MWS username: sgatayl6
//
// Time Complexity and explanation: 
// f denotes initial cabinet size
// n denotes the total number of requests 
// d denotes number of distinct requests
// You can use any of the above notations or define additional notation as you wish.
// 
// appendIfMiss():
// 	
// moveToFront():
// 	
// freqCount():
// 

import java.util.Arrays;
import java.util.ArrayList;
 
class COMP108A2Cab {

	public COMP108A2Node head, tail;
	
	public COMP108A2Cab() {
		head = null;
		tail = null;
	}

	// append to end of list when miss
	public COMP108A2Output appendIfMiss(int rArray[], int rSize) {
		COMP108A2Output output = new COMP108A2Output(rSize, 1);
		
        // ****** Code hear******
		boolean hit;
		COMP108A2Node cabinetNode;
		int comparisons =0;
		for (int i = 0; i < rSize; i++){
			comparisons=0;
			cabinetNode = head;
			hit= false;
			while  (hit==false && cabinetNode !=null) {
				comparisons++;
				if (rArray[i]==cabinetNode.data) {
					hit =true;
					output.hitCount++;
					}
			else {
					output.missCount++;
				}
			cabinetNode=cabinetNode.next;
			}
		  if (hit==false){
			System.out.println("Were are adding a new tail");
			COMP108A2Node newTail = new COMP108A2Node(rArray[i]);
			insertTail(newTail);
			  // update tail
		  }
		  output.compare[i]=comparisons;
		}
		
		// go through the whole array checking that it dosnt exist
		// if it doesnt exist then add it to end
		output.cabFromHead = headToTail();
		output.cabFromTail = tailToHead();

		return output;
	}

	// move the file requested to the beginning of the list
	public COMP108A2Output moveToFront(int rArray[], int rSize) {
		COMP108A2Output output = new COMP108A2Output(rSize, 1);
       // search through list for requested file
	   // if file found (i.e hit) move to front of list
	   // if file is not found (i.e miss) move to front of list
        boolean hit;
		COMP108A2Node cabinetNode;
		int comparisons =0;
		System.out.println("rsize: "+rSize);
		for (int i = 0; i < rSize; i++){
            System.out.println("YYYYY "+i);
			comparisons=0;
			cabinetNode = head;
			hit= false;
			while  (hit==false && cabinetNode !=null) {
				comparisons++;
				System.out.println("rArray[i]"+rArray[i]);
				if (rArray[i] !=cabinetNode.data) {
					output.missCount++;
					}
				else {
					 hit =true;
					 output.hitCount++;
				     }	
					 cabinetNode=cabinetNode.next;
			}
		  COMP108A2Node newHit = new cabinetNode;
		  if (hit==true){
			System.out.println("Were are moveing hit to head/front");
			System.out.println("Rsize: "+rSize);
			if (newHit.next==null && newHit.prev==null){   //special case of single node
			System.out.println("This is a sigle node filing cabinet");
			emptyCab();
			insertHead(newHit);
			tail=newHit;
			head=newHit;
			}
			else{
			if (newHit.next==null){ // are we at tail ?
			    System.out.println("We are at tail");
				System.out.println("i: "+i);
				COMP108A2Node newTail = new COMP108A2Node(newHit.prev);
				System.out.println("xxxx"+newHit.prev);
				newTail.next=null;
				newTail.prev=newHit;
				insertHead(newHit);
				head=newHit;
				tail=newTail;
			}
			
			// update poiners ???
			}	
			

		  }
		   else if (hit==false){ // if not in file put at front
			System.out.println("Were are moveing miss to head/front");
			COMP108A2Node newHead = new COMP108A2Node(rArray[i]);
			insertHead(newHead); 
		  }
		  output.compare[i]=comparisons;
		}
		output.cabFromHead = headToTail();
		output.cabFromTail = tailToHead();
		return output;	
	}
	
	// move the file requested so that order is by non-increasing frequency
	public COMP108A2Output freqCount(int rArray[], int rSize) {
		COMP108A2Output output = new COMP108A2Output(rSize, 1);
		
		output.cabFromHead = headToTail();
		output.cabFromTail = tailToHead();
		output.cabFromHeadFreq = headToTailFreq();
		return output;		
	}

	// DO NOT change this method
	// insert newNode to head of list
	public void insertHead(COMP108A2Node newNode) {		

		newNode.next = head;
		newNode.prev = null;
		if (head == null)
			tail = newNode;
		else
			head.prev = newNode;
		head = newNode;
	}

	// DO NOT change this method
	// insert newNode to tail of list
	public void insertTail(COMP108A2Node newNode) {

		newNode.next = null;
		newNode.prev = tail;
		if (tail != null)
			tail.next = newNode;
		else head = newNode;
		tail = newNode;
	}

	// DO NOT change this method
	// delete the node at the head of the linked list
	public COMP108A2Node deleteHead() {
		COMP108A2Node curr;

		curr = head;
		if (curr != null) {
			head = head.next;
			if (head == null)
				tail = null;
			else
				head.prev = null;
		}
		return curr;
	}
	
	// DO NOT change this method
	// empty the cabinet by repeatedly removing head from the list
	public void emptyCab() {
		while (head != null)
			deleteHead();
	}


	// DO NOT change this method
	// this will turn the list into a String from head to tail
	// Only to be used for output, do not use it to manipulate the list
	public String headToTail() {
		COMP108A2Node curr;
		String outString="";
		
		curr = head;
		while (curr != null) {
			outString += curr.data;
			outString += ",";
			curr = curr.next;
		}
		return outString;
	}

	// DO NOT change this method
	// this will turn the list into a String from tail to head
	// Only to be used for output, do not use it to manipulate the list
	public String tailToHead() {
		COMP108A2Node curr;
		String outString="";
		
		curr = tail;
		while (curr != null) {
			outString += curr.data;
			outString += ",";
			curr = curr.prev;
		}
		return outString;
	}

	// DO NOT change this method
	// this will turn the frequency of the list nodes into a String from head to tail
	// Only to be used for output, do not use it to manipulate the list
	public String headToTailFreq() {
		COMP108A2Node curr;
		String outString="";
		
		curr = head;
		while (curr != null) {
			outString += curr.freq;
			outString += ",";
			curr = curr.next;
		}
		return outString;
	}

}
